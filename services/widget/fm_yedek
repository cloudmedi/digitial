"use strict";

const DbMixin = require("../../mixins/db.mixin");
const {ObjectId} = require("mongodb");
const fs = require("fs");
const path = require("path");
const config = require("config");
const domains = config.get("DOMAINS");

/**
 * @typedef {import("moleculer").Context} Context Moleculer's Context
 */

module.exports = {
	name: "filemanager",
	version: 1,

	/**
	 * Mixins
	 */
	mixins: [DbMixin("folders")],

	whitelist: [],
	/**
	 * Settings
	 */
	settings: {
		// Available fields in the responses
		fields: [
			"_id",
			"name",
			"parent",
			"left",
			"right",
			"updatedAt",
			"createdAt"
		],

		// Validator for the `create` & `insert` actions.
		entityValidator: {
			name: "string",
			slug: "string"
		},
		populates: {}
	},
	hooks: {
		before: {
			/**
			 * Register a before hook for the `create` action.
			 * It sets a default value for the quantity field.
			 *
			 * @param {Context} ctx
			 */
			create(ctx) {
				ctx.params.createdAt = new Date();
				ctx.params.updatedAt = null;
				ctx.params.user = new ObjectId(ctx.meta.user._id);
				ctx.params.status = true;
			},
			update(ctx) {
				ctx.params.updatedAt = new Date();
			}
		},
	},
	events: {
		// Subscribe to `user.created` event
		async "image.created"(image_row) {
			//console.log("User created:", user);
			await this.updateImage(image_row);
			setTimeout(() => {
				try {
					console.log("image_row", image_row,);
					console.log("silme başladı");
					const file = path.join(__dirname, "../../", "/public", image_row.path, image_row.file);
					fs.unlinkSync(file);

					console.log(file, "deleted");
				} catch (e) {
					console.log(e);
				}
			}, 1000 * 60 * 2);

		},
	},
	/**
	 * Actions
	 */
	actions: {
		create: {
			auth: "required",
			params: {
				name: {type: "string"},
				parent: {type: "string", default: null},
			},
			async handler(ctx) {
				const {name, parent, createdAt, updatedAt, status, user} = ctx.params;
				const data = {
					name, parent: (parent === "" ? null : parent), left: 0, right: 1, createdAt, updatedAt, status, user
				};

				await this.insertFolder(data);

			}
		}
	},

	/**
	 * Methods
	 */
	methods: {
		async updateImage(image_row) {
			await this.broker.call("v1.widget.image.update", {
				id: image_row._id,
				domain: domains.cdn,
				provider: "bunny_net",
				updatedAt: new Date()
			});
		},
		async insertFolder(data) {
			return await this.adapter.updateOne({name: data.name}, {$set: data}, {upsert: true});
		}
	},

	/**
	 * Fired after database connection establishing.
	 */
	async afterConnected() {
		// await this.adapter.collection.createIndex({ name: 1 });
	}
};
